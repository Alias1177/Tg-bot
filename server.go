package main

import (
	"encoding/json"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/jmoiron/sqlx"
	"github.com/joho/godotenv"
	_ "github.com/lib/pq"
	"github.com/stripe/stripe-go/v82"
	"github.com/stripe/stripe-go/v82/checkout/session"
	"github.com/stripe/stripe-go/v82/webhook"
)

var (
	countryPriceMap = map[string]string{
		"ES":  "price_1RYU9RGLgFy5Oc1p9HFfnZtz",
		"CA":  "price_1RYU9RGLgFy5Oc1p9HFfnZtz",
		"US":  "price_1RYU9RGLgFy5Oc1p9HFfnZtz",
		"TR":  "price_1RYU9RGLgFy5Oc1p9HFfnZtz",
		"CIS": "price_1RYU9RGLgFy5Oc1p9HFfnZtz",
		"AS":  "price_1RYU9RGLgFy5Oc1p9HFfnZtz",
	}
	db      *sqlx.DB
	bot     *tgbotapi.BotAPI
	botChan chan PaymentNotification
)

type User struct {
	ID      int64  `db:"id"`
	Email   string `db:"email"`
	Country string `db:"country"`
	ChatID  int64  `db:"chat_id"`
}

type PaymentNotification struct {
	ChatID    int64
	Email     string
	SessionID string
	Status    string
	Amount    int64 // –ù–æ–≤–æ–µ –ø–æ–ª–µ
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
func isValidEmail(email string) bool {
	emailRegex := regexp.MustCompile(`^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`)
	return emailRegex.MatchString(email)
}

func insertPayment(db *sqlx.DB, userID int64, sessionID, status string, amount int64) error {
	query := `
        INSERT INTO payments (
            user_id, 
            status, 
            session_id, 
            amount,
            created_at,
            completed_at
        ) VALUES (
            $1, 
            $2, 
            $3, 
            $4,
            extract(epoch from now()),
            CASE WHEN $2::varchar = 'completed' THEN extract(epoch from now()) ELSE NULL END
        )
        ON CONFLICT (session_id) DO UPDATE SET
            status = EXCLUDED.status,
            completed_at = CASE WHEN EXCLUDED.status::varchar = 'completed' THEN extract(epoch from now()) ELSE payments.completed_at END`

	_, err := db.Exec(query, userID, status, sessionID, amount)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: %v", err)
		return err
	}

	log.Printf("–ü–ª–∞—Ç–µ–∂ –¥–æ–±–∞–≤–ª–µ–Ω: UserID=%d, SessionID=%s, Status=%s", userID, sessionID, status)
	return nil
}

func main() {
	// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
	if err := godotenv.Load(); err != nil {
		log.Println("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ñ–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏
	botChan = make(chan PaymentNotification, 100)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Stripe
	stripe.Key = os.Getenv("STRIPE_SECRET_KEY")
	if stripe.Key == "" {
		log.Fatal("STRIPE_SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	var err error
	db, err = sqlx.Connect("postgres", os.Getenv("DATABASE_URL"))
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", err)
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
	initDB()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
	bot, err = tgbotapi.NewBotAPI(os.Getenv("TOKEN"))
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:", err)
	}

	// –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
	go handlePaymentNotifications()

	// HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Stripe Webhook –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–π
	http.HandleFunc("/webhookBook", handleStripeWebhook)
	http.HandleFunc("/create-checkout-session", handleCreateSession)
	http.Handle("/", http.FileServer(http.Dir("public")))

	// –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go runTelegramBot()

	// –ó–∞–ø—É—Å–∫ HTTPS —Å–µ—Ä–≤–µ—Ä–∞
	addr := ":8443"
	log.Printf("HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ https://localhost%s", addr)
	log.Fatal(http.ListenAndServeTLS(addr, "cert.pem", "key.pem", nil))
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func initDB() {
	db.MustExec(`
		CREATE TABLE IF NOT EXISTS users (
			id SERIAL PRIMARY KEY,
			email TEXT NOT NULL UNIQUE,
			country VARCHAR NOT NULL,
			chat_id BIGINT NOT NULL
		)
	`)

	db.MustExec(`
		CREATE TABLE IF NOT EXISTS payments (
			id VARCHAR PRIMARY KEY,
			user_id BIGINT REFERENCES users(id),
			status VARCHAR NOT NULL,
			session_id VARCHAR NOT NULL UNIQUE,
			amount BIGINT NOT NULL,
			created_at BIGINT NOT NULL,
			completed_at BIGINT
		)
	`)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ Stripe Checkout
func handleCreateSession(w http.ResponseWriter, r *http.Request) {
	email := r.URL.Query().Get("email")
	if email == "" {
		http.Error(w, "Email –Ω–µ —É–∫–∞–∑–∞–Ω", http.StatusBadRequest)
		return
	}

	country := r.URL.Query().Get("country")
	if country == "" {
		country = "ES" // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	chatID := r.URL.Query().Get("chat_id")
	if chatID == "" {
		http.Error(w, "Chat ID –Ω–µ —É–∫–∞–∑–∞–Ω", http.StatusBadRequest)
		return
	}

	priceID, ok := countryPriceMap[country]
	if !ok {
		priceID = countryPriceMap["ES"]
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ—Å—Å–∏–∏
	metadata := make(map[string]string)
	metadata["email"] = email
	metadata["country"] = country
	metadata["chat_id"] = chatID

	// –ü–æ–ª—É—á–∞–µ–º IP —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost
	var domain string
	serverIP := os.Getenv("SERVER_IP")
	serverPort := os.Getenv("SERVER_PORT")
	if serverPort == "" {
		serverPort = "8443"
	}

	if serverIP == "" {
		domain = "https://localhost:" + serverPort
	} else {
		domain = "https://" + serverIP + ":" + serverPort
	}
	params := &stripe.CheckoutSessionParams{
		LineItems: []*stripe.CheckoutSessionLineItemParams{
			{
				Price:    stripe.String(priceID),
				Quantity: stripe.Int64(1),
			},
		},
		Mode:          stripe.String(string(stripe.CheckoutSessionModePayment)),
		SuccessURL:    stripe.String(domain + "/success.html"),
		CancelURL:     stripe.String(domain + "/cancel.html"),
		CustomerEmail: stripe.String(email),
		Metadata:      metadata,
	}

	s, err := session.New(params)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
		http.Error(w, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –æ–ø–ª–∞—Ç—ã", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{"url": s.URL})
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Stripe
func handleStripeWebhook(w http.ResponseWriter, r *http.Request) {
	const MaxBodyBytes = int64(65536)
	r.Body = http.MaxBytesReader(w, r.Body, MaxBodyBytes)
	payload, err := io.ReadAll(r.Body)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		http.Error(w, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞", http.StatusInternalServerError)
		return
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
	stripeSignature := r.Header.Get("Stripe-Signature")
	endpointSecret := os.Getenv("STRIPE_WEBHOOK_SECRET")

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
	event, err := webhook.ConstructEvent(payload, stripeSignature, endpointSecret)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook: %v", err)
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å", http.StatusBadRequest)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π Stripe
	switch event.Type {
	case "checkout.session.completed":
		var session stripe.CheckoutSession
		err := json.Unmarshal(event.Data.Raw, &session)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–µ—Å—Å–∏–∏: %v", err)
			http.Error(w, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö", http.StatusInternalServerError)
			return
		}

		// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
		email := session.Metadata["email"]
		chatIDStr := session.Metadata["chat_id"]

		if email == "" || chatIDStr == "" {
			log.Printf("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ: email=%s, chat_id=%s", email, chatIDStr)
			http.Error(w, "–ù–µ–ø–æ–ª–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", http.StatusBadRequest)
			return
		}

		// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –∫–∞–Ω–∞–ª
		notification := PaymentNotification{
			Email:     email,
			SessionID: session.ID,
			Status:    "completed",
			Amount:    session.AmountTotal / 100, // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—Ç–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É
		}
		botChan <- notification

		log.Printf("–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è %s", email)
	}

	w.WriteHeader(http.StatusOK)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –¥–ª—è Telegram –±–æ—Ç–∞
func handlePaymentNotifications() {
	for notification := range botChan {
		var user User
		err := db.Get(&user, "SELECT * FROM users WHERE email = $1", notification.Email)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
			continue
		}

		// –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
		err = insertPayment(db, user.ID, notification.SessionID, notification.Status, notification.Amount)
		if err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂: %v", err)
		}

		// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		msg := tgbotapi.NewMessage(user.ChatID, "‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∫–Ω–∏–≥–∏:")
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π", "DE"),
				tgbotapi.NewInlineKeyboardButtonData("üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "EN"),
				tgbotapi.NewInlineKeyboardButtonData("üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π", "ES"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "RU"),
				tgbotapi.NewInlineKeyboardButtonData("üáπüá∑ –¢—É—Ä–µ—Ü–∫–∏–π", "TR"),
			),
		)
		bot.Send(msg)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞
func runTelegramBot() {
	// –í —Ñ—É–Ω–∫—Ü–∏–∏ runTelegramBot –æ–±–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	userState := make(map[int64]string)
	userData := make(map[int64]map[string]string)

	for update := range updates {
		if update.Message == nil && update.CallbackQuery == nil {
			continue
		}

		var chatID int64
		if update.Message != nil {
			chatID = update.Message.Chat.ID
		} else if update.CallbackQuery != nil {
			chatID = update.CallbackQuery.Message.Chat.ID
		}

		if _, ok := userData[chatID]; !ok {
			userData[chatID] = make(map[string]string)
		}

		// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
		// –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å insertUser –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ SQL
		if update.Message != nil && update.Message.IsCommand() {
			if update.Message.Command() == "start" {
				userState[chatID] = "awaiting_email"
				bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:"))
			}
		} else if update.Message != nil {
			switch userState[chatID] {
			case "awaiting_email":
				email := update.Message.Text

				if !isValidEmail(email) {
					msg := tgbotapi.NewMessage(chatID, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –≤ —Ñ–æ—Ä–º–∞—Ç–µ example@domain.com")
					bot.Send(msg)
					continue
				}

				userData[chatID]["email"] = email
				userState[chatID] = "awaiting_country"

				msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:")
				msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üá™üá∫ –ï–°", "country_ES"),
						tgbotapi.NewInlineKeyboardButtonData("üá®üá¶ –ö–∞–Ω–∞–¥–∞", "country_CA"),
						tgbotapi.NewInlineKeyboardButtonData("üá∫üá∏ –°–®–ê", "country_US"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üáπüá∑ –¢—É—Ä—Ü–∏—è", "country_TR"),
						tgbotapi.NewInlineKeyboardButtonData("üåç –°–ù–ì", "country_CIS"),
						tgbotapi.NewInlineKeyboardButtonData("üåè –ê–∑–∏—è", "country_AS"),
					),
				)
				bot.Send(msg)
			}
		} else if update.CallbackQuery != nil {
			data := update.CallbackQuery.Data

			if data == "DE" || data == "EN" || data == "ES" || data == "RU" || data == "TR" {
				// –û—Ç–ø—Ä–∞–≤–∫–∞ PDF —Ñ–∞–π–ª–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
				waitMsg := tgbotapi.NewMessage(chatID, "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é –∫–Ω–∏–≥—É...")
				waitMsg.ProtectContent = true
				bot.Send(waitMsg)

				filePath := filepath.Join("pfdSender", "Trade-Plus.Online:"+data+".pdf")
				doc := tgbotapi.NewDocument(chatID, tgbotapi.FilePath(filePath))
				doc.Caption = "üìò –í–∞—à–∞ –∫–Ω–∏–≥–∞ –Ω–∞: " + data
				doc.ProtectContent = true
				bot.Send(doc)

				delete(userState, chatID)
			} else if strings.HasPrefix(data, "country_") {
				// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
				countryCode := strings.TrimPrefix(data, "country_")
				userData[chatID]["country"] = countryCode

				// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
				var userID int64
				err := db.QueryRow(
					"INSERT INTO users (email, country, chat_id) VALUES ($1, $2, $3) RETURNING id",
					userData[chatID]["email"], countryCode, chatID,
				).Scan(&userID)

				if err != nil {
					bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ"))
					log.Println(err)

				} else {
					// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –Ω–∞–ø—Ä—è–º—É—é
					priceID, ok := countryPriceMap[countryCode]
					if !ok {
						priceID = countryPriceMap["ES"]
					}

					params := &stripe.CheckoutSessionParams{
						LineItems: []*stripe.CheckoutSessionLineItemParams{
							{
								Price:    stripe.String(priceID),
								Quantity: stripe.Int64(1),
							},
						},
						Mode:          stripe.String(string(stripe.CheckoutSessionModePayment)),
						SuccessURL:    stripe.String("https://t.me/Trade_Plus_Online_Bot"),
						CancelURL:     stripe.String("https://t.me/Trade_Plus_Online_Bot"),
						CustomerEmail: stripe.String(userData[chatID]["email"]),
						Metadata: map[string]string{
							"email":   userData[chatID]["email"],
							"country": countryCode,
							"chat_id": strconv.FormatInt(chatID, 10),
						},
					}

					s, err := session.New(params)
					if err != nil {
						bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –æ–ø–ª–∞—Ç—ã"))
						log.Println(err)
						return
					}

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Stripe Checkout
					msg := tgbotapi.NewMessage(chatID, "üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:")
					msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
						tgbotapi.NewInlineKeyboardRow(
							tgbotapi.NewInlineKeyboardButtonURL("üîí –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑", s.URL),
						),
					)
					bot.Send(msg)
				}
			}
		}
	}
}
